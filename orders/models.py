from django.db import models
from django.utils import timezone
from django.utils.safestring import mark_safe

from django.db.models.signals import pre_save, post_save
from django.dispatch import receiver

from accounts.models import Notifications

from utils import upload_function

# ‚ùí –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class Order(models.Model):
    # –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞
    STATUS_NEW = 'new'
    STATUS_IN_PROGRESS = 'in_progress'
    STATUS_READY = 'is_ready'
    STATUS_COMPLETED = 'completed'

    STATUS_CHOICES = (
        (STATUS_NEW, '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑'),
        (STATUS_IN_PROGRESS, '–ó–∞–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ'),
        (STATUS_READY, '–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ'),
        (STATUS_COMPLETED, '–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω'),
    )

    # –¢–∏–ø—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    BUYING_TYPE_SELF = 'self'
    BUYING_TYPE_DELIVERY = 'delivery'

    BUYING_TYPE_CHOICES = (
        (BUYING_TYPE_SELF, '–°–∞–º–æ–≤—ã–≤–æ–∑'),
        (BUYING_TYPE_DELIVERY, '–î–æ—Å—Ç–∞–≤–∫–∞'),
    )

    customer = models.ForeignKey('accounts.Customer', verbose_name = '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å', related_name = 'orders', on_delete = models.CASCADE)
    cart = models.ForeignKey('cart.Cart', verbose_name = '–ö–æ—Ä–∑–∏–Ω–∞', on_delete = models.CASCADE)
    created_at = models.DateTimeField(default = timezone.now, verbose_name = '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞')
    order_date = models.DateTimeField( default = timezone.now, verbose_name = '–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞')

    status = models.CharField(max_length = 20, verbose_name = '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞', choices = STATUS_CHOICES, default = STATUS_NEW)
    buying_type = models.CharField(max_length = 20, verbose_name = '–¢–∏–ø –ø–æ–ª—É—á–µ–Ω–∏—è', choices = BUYING_TYPE_CHOICES)

    first_name = models.CharField(max_length = 100, verbose_name = '–ò–º—è', blank = True, null = True)
    last_name = models.CharField(max_length = 100, verbose_name = '–§–∞–º–∏–ª–∏—è', blank = True, null = True)
    phone = models.CharField(max_length = 30, verbose_name = '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    email = models.EmailField(verbose_name = '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞', blank = True, null = True)
    address = models.CharField(max_length = 255, verbose_name='–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏', blank = True, null = True)
    comment = models.TextField(verbose_name = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', blank = True, null = True)
    paid = models.BooleanField(default = False, verbose_name = '–û–ø–ª–∞—á–µ–Ω')  

    def __str__(self):
        return f"–ó–∞–∫–∞–∑ ‚Ññ{self.id} | –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {self.customer.user.username} | –°—Ç–∞—Ç—É—Å: {self.get_status_display()}"
    
    class Meta:
            verbose_name = '–ó–∞–∫–∞–∑'
            verbose_name_plural = '–ó–∞–∫–∞–∑—ã'

# ‚ùí –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –ø–æ –∑–∞–∫–∞–∑—É
class Payment(models.Model):
    # –°—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–∞
    STATUS_PENDING = 'pending'
    STATUS_SUCCESS = 'success'
    STATUS_FAILED = 'failed'

    STATUS_CHOICES = (
        (STATUS_PENDING, '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'),
        (STATUS_SUCCESS, '–£—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω'),
        (STATUS_FAILED, '–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã'),
    )

    order = models.ForeignKey(Order, verbose_name = '–ó–∞–∫–∞–∑', related_name = 'payments', on_delete = models.CASCADE)
    amount = models.DecimalField(max_digits = 10, decimal_places = 2, verbose_name = '–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã')
    payment_id = models.CharField(max_length = 100, verbose_name = 'ID –ø–ª–∞—Ç–µ–∂–∞', blank = True, null = True)
    payment_date = models.DateTimeField(verbose_name = '–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã', default = timezone.now)
    status = models.CharField(max_length = 20, verbose_name = '–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞', choices = STATUS_CHOICES, default = STATUS_PENDING)
    payment_method = models.CharField(max_length = 50, verbose_name = '–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', blank = True, null = True, default='–ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ Stripe')

    def __str__(self):
        return f"–û–ø–ª–∞—Ç–∞ {self.payment_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{self.order.id} | –°—Ç–∞—Ç—É—Å: {self.get_status_display()}"

    class Meta:
        verbose_name = '–ü–ª–∞—Ç—ë–∂'
        verbose_name_plural = '–ü–ª–∞—Ç–µ–∂–∏'

# ‚ùí –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–æ–≤
class ReturnRequest(models.Model):
    # –°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç
    STATUS_PENDING = 'pending'
    STATUS_APPROVED = 'approved'
    STATUS_REJECTED = 'canceled'
    STATUS_PAID = 'paid'

    STATUS_CHOICES = (
        (STATUS_PENDING, '–û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è'),
        (STATUS_APPROVED, '–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞'),
        (STATUS_REJECTED, '–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞'),
        (STATUS_PAID, '–í–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–ª–∞—á–µ–Ω'),
    )

    # –ü—Ä–∏—á–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞
    REASON_DEFECTIVE = 'defective'
    REASON_WRONG = 'wrong'
    REASON_NOT_NEEDED = 'not_needed'
    REASON_OTHER = 'other'

    REASON_CHOICES = (
        (REASON_DEFECTIVE, '–¢–æ–≤–∞—Ä –ø–æ–≤—Ä–µ–∂–¥–µ–Ω (—Ü–∞—Ä–∞–ø–∏–Ω—ã, –¥–µ—Ñ–µ–∫—Ç—ã)'),
        (REASON_WRONG, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–ª—å–±–æ–º / –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'),
        (REASON_NOT_NEEDED, '–¢–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω'),
        (REASON_OTHER, '–î—Ä—É–≥–æ–µ'),
    )

    customer = models.ForeignKey('accounts.Customer', verbose_name = '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å', related_name = 'return_requests', on_delete = models.CASCADE, blank = True, null = True)
    order = models.ForeignKey('Order', verbose_name = '–ó–∞–∫–∞–∑', related_name = 'return_requests', on_delete = models.CASCADE)
    products = models.ManyToManyField('cart.CartProduct', verbose_name = '–¢–æ–≤–∞—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞', related_name = 'return_requests')
    reason = models.CharField(max_length = 50, verbose_name = '–ü—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞', choices = REASON_CHOICES)
    details = models.TextField(verbose_name = '–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', blank = True, null = True)
    file = models.FileField(upload_to = upload_function, verbose_name = '–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª', blank = True, null = True)
    status = models.CharField(max_length = 20, verbose_name = '–°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞', choices = STATUS_CHOICES, default = STATUS_PENDING)
    created_at = models.DateTimeField(default = timezone.now, verbose_name = '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
    updated_at = models.DateTimeField(auto_now = True, verbose_name = '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')

    def __str__(self):
        return f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{self.order.id} | –°—Ç–∞—Ç—É—Å: {self.get_status_display()}"

    class Meta:
        verbose_name = '–ó–∞—è–≤–∫–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç'
        verbose_name_plural = '–ó–∞—è–≤–∫–∏ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç'

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –ø–µ—Ä–µ–¥ –µ—ë –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
def get_previous_status(instance, **kwargs):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        obj = ReturnRequest.objects.get(pk=instance.pk)
        instance._previous_status = obj.status
    except ReturnRequest.DoesNotExist:
        # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–æ–≤–∞—è, –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Ç
        instance._previous_status = None

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
@receiver(post_save, sender = ReturnRequest)
def send_return_status_notification(sender, instance, created, **kwargs):
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
    if hasattr(instance, '_previous_status') and instance._previous_status != instance.status:
        status_display = instance.get_status_display()
        notification_text = mark_safe(
            f'üìù –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{instance.order.id} –∏–∑–º–µ–Ω–∏–ª—Å—è! ' \
            f'<a href="/profile/orders/?order_id={instance.order.id}" style="color: #2563eb; text-decoration: underline;">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏</a>'
        )
        Notifications.objects.create(
            recipient = instance.customer,
            text = notification_text
        )

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
pre_save.connect(get_previous_status, sender = ReturnRequest)